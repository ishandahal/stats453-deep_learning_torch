{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "simple_rnn.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tp1xWTgk57jn"
      },
      "source": [
        "Simple RNN for sentiment classification"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bzADkF7M6vlm"
      },
      "source": [
        "# !pip install watermark"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5laMtE-b6FTA",
        "outputId": "05dee0a9-68d6-4592-a2e9-c0e14acefd3d"
      },
      "source": [
        "## Imports\n",
        "\n",
        "%load_ext watermark\n",
        "%watermark -a 'Ishan Dahal' -v -p torch\n",
        "\n",
        "import torch\n",
        "import torch.nn.functional as F\n",
        "from torchtext import data\n",
        "from torchtext import datasets\n",
        "import time\n",
        "import random\n",
        "import torch.nn as nn \n",
        "\n",
        "torch.backends.cudnn.deterministic = True"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Author: Ishan Dahal\n",
            "\n",
            "Python implementation: CPython\n",
            "Python version       : 3.7.10\n",
            "IPython version      : 5.5.0\n",
            "\n",
            "torch: 1.7.1+cu101\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "857OChOm6seX"
      },
      "source": [
        "MODEL SETTINGS"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GVyfCNCy7AOG"
      },
      "source": [
        "RANDOM_SEED = 123\n",
        "torch.manual_seed(RANDOM_SEED)\n",
        "\n",
        "VOCABULARY_SIZE = 20000\n",
        "LEARNING_RATE = 1e-4\n",
        "BATCH_SIZE = 128\n",
        "NUM_EPOCHS = 15\n",
        "DEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A-Sxss5K7dUS"
      },
      "source": [
        "DATASET"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aTgtnYOc7jbj",
        "outputId": "9251dd18-fc80-43a7-a42b-a178b2304011"
      },
      "source": [
        "TEXT = data.Field(tokenize='spacy')\n",
        "LABEL = data.LabelField(dtype = torch.float)\n",
        "train_data, test_data = datasets.IMDB.splits(TEXT, LABEL)\n",
        "train_data, valid_data = train_data.split(random_state=random.seed(RANDOM_SEED),\n",
        "                                          split_ratio=0.8)\n",
        "print(f\"Num Train: {len(train_data)}\")\n",
        "print(f\"Num Valid: {len(valid_data)}\")\n",
        "print(f\"Num Test: {len(test_data)}\")"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "downloading aclImdb_v1.tar.gz\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "aclImdb_v1.tar.gz: 100%|██████████| 84.1M/84.1M [00:03<00:00, 22.9MB/s]\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Num Train: 20000\n",
            "Num Valid: 5000\n",
            "Num Test: 25000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NtJMh8OH8X4b",
        "outputId": "9b1b5367-a86d-4512-a1c1-568db4fbbc7e"
      },
      "source": [
        "# build the vocabulary \n",
        "TEXT.build_vocab(train_data, max_size=VOCABULARY_SIZE)\n",
        "LABEL.build_vocab(train_data)\n",
        "\n",
        "print(f\"Vocabulary size: {len(TEXT.vocab)}\")\n",
        "print(f\"Number of Classes: {len(LABEL.vocab)}\")"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Vocabulary size: 20002\n",
            "Number of Classes: 2\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2EmBkUYJ-t2V"
      },
      "source": [
        "## passing the dataset into dataloaders\n",
        "\n",
        "train_loader, valid_loader, test_loader = data.BucketIterator.splits(\n",
        "    (train_data, valid_data, test_data), \n",
        "    batch_size=BATCH_SIZE,\n",
        "    device=DEVICE)"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y0YkonpT-5Fl",
        "outputId": "0222f0ce-fdfb-460f-a8d0-0a6b0b4b141b"
      },
      "source": [
        "## Testing out the iterators\n",
        "\n",
        "print('Train')\n",
        "for i, batch in enumerate(train_loader):\n",
        "    print(f'Text matrix size: {batch.text.size()}')\n",
        "    print(f'Target vector size: {batch.label.size()}')\n",
        "    break\n",
        "    \n",
        "print('\\nValid:')\n",
        "for batch in valid_loader:\n",
        "    print(f'Text matrix size: {batch.text.size()}')\n",
        "    print(f'Target vector size: {batch.label.size()}')\n",
        "    break\n",
        "    \n",
        "print('\\nTest:')\n",
        "for batch in test_loader:\n",
        "    print(f'Text matrix size: {batch.text.size()}')\n",
        "    print(f'Target vector size: {batch.label.size()}')\n",
        "    \n",
        "    break"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train\n",
            "Text matrix size: torch.Size([1131, 128])\n",
            "Target vector size: torch.Size([128])\n",
            "\n",
            "Valid:\n",
            "Text matrix size: torch.Size([61, 128])\n",
            "Target vector size: torch.Size([128])\n",
            "\n",
            "Test:\n",
            "Text matrix size: torch.Size([42, 128])\n",
            "Target vector size: torch.Size([128])\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ItIU8JAZANtw"
      },
      "source": [
        "MODEL"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FkjlT0gbBtg_"
      },
      "source": [
        "## Creating a simple RNN \n",
        "\n",
        "class RNN(nn.Module):\n",
        "    def __init__(self, input_dim, embedding_dim, hidden_dim, output_dim):\n",
        "        super().__init__()\n",
        "    \n",
        "        self.embedding = nn.Embedding(input_dim, embedding_dim)\n",
        "        self.rnn = nn.RNN(embedding_dim, hidden_dim)\n",
        "        self.fc = nn.Linear(hidden_dim, output_dim)\n",
        "\n",
        "    def forward(self, text):\n",
        "        # [sentence len, batch size] => [sentence len, batch size, embedding size]\n",
        "        embedded = self.embedding(text)\n",
        "\n",
        "        # [sentence len, batch size, embedding size] => \n",
        "        # outout: [sentence len, batch size, hidden size]\n",
        "        # hidden: [1, batch size, hidden size]\n",
        "        output, hidden = self.rnn(embedded)\n",
        "\n",
        "        # [1, batch size, hidden size] => [batch size, output_dim]\n",
        "        return self.fc(hidden.squeeze(0)).view(-1)\n"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HLD984C6GSZH"
      },
      "source": [
        "INPUT_DIM = len(TEXT.vocab)\n",
        "EMBEDDING_DIM = 64\n",
        "HIDDEN_DIM = 128\n",
        "OUTPUT_DIM = 1\n",
        "\n",
        "model = RNN(INPUT_DIM, EMBEDDING_DIM, HIDDEN_DIM, OUTPUT_DIM)\n",
        "model = model.to(DEVICE)\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=LEARNING_RATE)"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mmD3q1O7GjWO"
      },
      "source": [
        "TRAINING"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QEXzy92PGlZ0"
      },
      "source": [
        "## calculating the accuracy \n",
        "\n",
        "def compute_binary_accuracy(model, data_loader, device):\n",
        "    model.eval()\n",
        "    correct_pred, num_examples = 0, 0\n",
        "    with torch.no_grad():\n",
        "        for batch_idx, batch_data in enumerate(data_loader):\n",
        "            logits = model(batch_data.text)\n",
        "            predicted_labels = (torch.sigmoid(logits) > 0.5).long()\n",
        "            num_examples += batch_data.label.size(0)\n",
        "            correct_pred += (predicted_labels == batch_data.label.long()).sum()\n",
        "        return (correct_pred.float() / num_examples) * 100"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sPJATICpIDqr",
        "outputId": "37672ede-6259-4bc4-b6b7-eeb2a079a3bd"
      },
      "source": [
        "start_time = time.time()\n",
        "\n",
        "for epoch in range(NUM_EPOCHS):\n",
        "    model.train()\n",
        "    for batch_idx, batch_data in enumerate(train_loader):\n",
        "\n",
        "        ## forward and backward pass\n",
        "        logits = model(batch_data.text)\n",
        "        cost = F.binary_cross_entropy_with_logits(logits, batch_data.label)\n",
        "        # zero the gradients\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # calculate the gradients\n",
        "        cost.backward()\n",
        "\n",
        "        # update the parameters\n",
        "        optimizer.step()\n",
        "\n",
        "        ## logging \n",
        "        if not batch_idx % 50:\n",
        "            print(f\"Epoch: {epoch+1} / {NUM_EPOCHS} | \"\n",
        "                  f\"BATCH: {batch_idx} / {len(train_loader)} | \"\n",
        "                  f\"Cost: {cost:.4f}\")\n",
        "\n",
        "    with torch.set_grad_enabled(False):\n",
        "        print(f\"training accuracy: \"\n",
        "              f\"{compute_binary_accuracy(model, train_loader, DEVICE):.2f}%\"\n",
        "              f\"\\nvalid accuracy: \"\n",
        "              f\"{compute_binary_accuracy(model, valid_loader, DEVICE):.2f}%\")\n",
        "\n",
        "    print(f\"Time elapsed: {((time.time() - start_time) / 60):.2f} min\")\n",
        "        \n",
        "print(f\"Total training time: {((time.time() - start_time) / 60):.2f} min\")\n",
        "print(f\"Test set accuracy: {compute_binary_accuracy(model, test_loader, DEVICE):.2f}%\")"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch: 1 / 15 | BATCH: 0 / 157 | Cost: 0.6891\n",
            "Epoch: 1 / 15 | BATCH: 50 / 157 | Cost: 0.6955\n",
            "Epoch: 1 / 15 | BATCH: 100 / 157 | Cost: 0.6952\n",
            "Epoch: 1 / 15 | BATCH: 150 / 157 | Cost: 0.6903\n",
            "training accuracy: 50.01%\n",
            "valid accuracy: 49.06%\n",
            "Time elapsed: 0.24 min\n",
            "Epoch: 2 / 15 | BATCH: 0 / 157 | Cost: 0.6877\n",
            "Epoch: 2 / 15 | BATCH: 50 / 157 | Cost: 0.6914\n",
            "Epoch: 2 / 15 | BATCH: 100 / 157 | Cost: 0.6915\n",
            "Epoch: 2 / 15 | BATCH: 150 / 157 | Cost: 0.6936\n",
            "training accuracy: 50.07%\n",
            "valid accuracy: 48.30%\n",
            "Time elapsed: 0.47 min\n",
            "Epoch: 3 / 15 | BATCH: 0 / 157 | Cost: 0.6923\n",
            "Epoch: 3 / 15 | BATCH: 50 / 157 | Cost: 0.6966\n",
            "Epoch: 3 / 15 | BATCH: 100 / 157 | Cost: 0.6896\n",
            "Epoch: 3 / 15 | BATCH: 150 / 157 | Cost: 0.6924\n",
            "training accuracy: 50.08%\n",
            "valid accuracy: 49.96%\n",
            "Time elapsed: 0.71 min\n",
            "Epoch: 4 / 15 | BATCH: 0 / 157 | Cost: 0.6924\n",
            "Epoch: 4 / 15 | BATCH: 50 / 157 | Cost: 0.6930\n",
            "Epoch: 4 / 15 | BATCH: 100 / 157 | Cost: 0.6916\n",
            "Epoch: 4 / 15 | BATCH: 150 / 157 | Cost: 0.6920\n",
            "training accuracy: 50.06%\n",
            "valid accuracy: 49.26%\n",
            "Time elapsed: 0.94 min\n",
            "Epoch: 5 / 15 | BATCH: 0 / 157 | Cost: 0.6923\n",
            "Epoch: 5 / 15 | BATCH: 50 / 157 | Cost: 0.6949\n",
            "Epoch: 5 / 15 | BATCH: 100 / 157 | Cost: 0.6963\n",
            "Epoch: 5 / 15 | BATCH: 150 / 157 | Cost: 0.6938\n",
            "training accuracy: 50.04%\n",
            "valid accuracy: 50.02%\n",
            "Time elapsed: 1.18 min\n",
            "Epoch: 6 / 15 | BATCH: 0 / 157 | Cost: 0.6930\n",
            "Epoch: 6 / 15 | BATCH: 50 / 157 | Cost: 0.6928\n",
            "Epoch: 6 / 15 | BATCH: 100 / 157 | Cost: 0.6914\n",
            "Epoch: 6 / 15 | BATCH: 150 / 157 | Cost: 0.6936\n",
            "training accuracy: 50.10%\n",
            "valid accuracy: 49.68%\n",
            "Time elapsed: 1.41 min\n",
            "Epoch: 7 / 15 | BATCH: 0 / 157 | Cost: 0.6929\n",
            "Epoch: 7 / 15 | BATCH: 50 / 157 | Cost: 0.6977\n",
            "Epoch: 7 / 15 | BATCH: 100 / 157 | Cost: 0.6934\n",
            "Epoch: 7 / 15 | BATCH: 150 / 157 | Cost: 0.6927\n",
            "training accuracy: 50.02%\n",
            "valid accuracy: 50.86%\n",
            "Time elapsed: 1.65 min\n",
            "Epoch: 8 / 15 | BATCH: 0 / 157 | Cost: 0.6924\n",
            "Epoch: 8 / 15 | BATCH: 50 / 157 | Cost: 0.6919\n",
            "Epoch: 8 / 15 | BATCH: 100 / 157 | Cost: 0.6926\n",
            "Epoch: 8 / 15 | BATCH: 150 / 157 | Cost: 0.6905\n",
            "training accuracy: 50.14%\n",
            "valid accuracy: 49.24%\n",
            "Time elapsed: 1.89 min\n",
            "Epoch: 9 / 15 | BATCH: 0 / 157 | Cost: 0.7003\n",
            "Epoch: 9 / 15 | BATCH: 50 / 157 | Cost: 0.6899\n",
            "Epoch: 9 / 15 | BATCH: 100 / 157 | Cost: 0.6938\n",
            "Epoch: 9 / 15 | BATCH: 150 / 157 | Cost: 0.6928\n",
            "training accuracy: 50.15%\n",
            "valid accuracy: 49.08%\n",
            "Time elapsed: 2.12 min\n",
            "Epoch: 10 / 15 | BATCH: 0 / 157 | Cost: 0.6929\n",
            "Epoch: 10 / 15 | BATCH: 50 / 157 | Cost: 0.6938\n",
            "Epoch: 10 / 15 | BATCH: 100 / 157 | Cost: 0.6918\n",
            "Epoch: 10 / 15 | BATCH: 150 / 157 | Cost: 0.6993\n",
            "training accuracy: 50.24%\n",
            "valid accuracy: 49.62%\n",
            "Time elapsed: 2.36 min\n",
            "Epoch: 11 / 15 | BATCH: 0 / 157 | Cost: 0.6933\n",
            "Epoch: 11 / 15 | BATCH: 50 / 157 | Cost: 0.6939\n",
            "Epoch: 11 / 15 | BATCH: 100 / 157 | Cost: 0.6983\n",
            "Epoch: 11 / 15 | BATCH: 150 / 157 | Cost: 0.6932\n",
            "training accuracy: 50.10%\n",
            "valid accuracy: 50.74%\n",
            "Time elapsed: 2.59 min\n",
            "Epoch: 12 / 15 | BATCH: 0 / 157 | Cost: 0.6927\n",
            "Epoch: 12 / 15 | BATCH: 50 / 157 | Cost: 0.6968\n",
            "Epoch: 12 / 15 | BATCH: 100 / 157 | Cost: 0.6940\n",
            "Epoch: 12 / 15 | BATCH: 150 / 157 | Cost: 0.6922\n",
            "training accuracy: 50.12%\n",
            "valid accuracy: 51.18%\n",
            "Time elapsed: 2.83 min\n",
            "Epoch: 13 / 15 | BATCH: 0 / 157 | Cost: 0.6914\n",
            "Epoch: 13 / 15 | BATCH: 50 / 157 | Cost: 0.6891\n",
            "Epoch: 13 / 15 | BATCH: 100 / 157 | Cost: 0.6908\n",
            "Epoch: 13 / 15 | BATCH: 150 / 157 | Cost: 0.6897\n",
            "training accuracy: 50.20%\n",
            "valid accuracy: 49.48%\n",
            "Time elapsed: 3.07 min\n",
            "Epoch: 14 / 15 | BATCH: 0 / 157 | Cost: 0.6888\n",
            "Epoch: 14 / 15 | BATCH: 50 / 157 | Cost: 0.6953\n",
            "Epoch: 14 / 15 | BATCH: 100 / 157 | Cost: 0.6893\n",
            "Epoch: 14 / 15 | BATCH: 150 / 157 | Cost: 0.6918\n",
            "training accuracy: 50.21%\n",
            "valid accuracy: 49.40%\n",
            "Time elapsed: 3.31 min\n",
            "Epoch: 15 / 15 | BATCH: 0 / 157 | Cost: 0.6911\n",
            "Epoch: 15 / 15 | BATCH: 50 / 157 | Cost: 0.6939\n",
            "Epoch: 15 / 15 | BATCH: 100 / 157 | Cost: 0.6917\n",
            "Epoch: 15 / 15 | BATCH: 150 / 157 | Cost: 0.6936\n",
            "training accuracy: 50.12%\n",
            "valid accuracy: 51.02%\n",
            "Time elapsed: 3.55 min\n",
            "Total training time: 3.55 min\n",
            "Test set accuracy: 48.04%\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gxpjuUMILgZ-"
      },
      "source": [
        "import spacy \n",
        "\n",
        "nlp = spacy.load('en')\n",
        "\n",
        "def predict_sentiment(model, sentence):\n",
        "    # based on \n",
        "    #https://github.com/bentrevett/pytorch-sentiment-analysis/blob/\n",
        "    # master/2%20-%20Upgraded%20Sentiment%20Analysis.ipynb\n",
        "    model.eval()\n",
        "    tokenized = [tok.text for tok in nlp.tokenizer(sentence)]\n",
        "    indexed = [TEXT.vocab.stoi[t] for t in tokenized]\n",
        "    tensor = torch.LongTensor(indexed).to(DEVICE)\n",
        "    tensor = tensor.unsqueeze(1)\n",
        "    prediction = torch.sigmoid(model(tensor))\n",
        "    return prediction.item()\n"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cHqt9TPOQn3n",
        "outputId": "666fa7c8-8e5a-4975-a9b9-d2202f8a498f"
      },
      "source": [
        "print(\"Probability of positive: \")\n",
        "predict_sentiment(model, \"I did not like the movie at all\")"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Probability of positive: \n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.35865479707717896"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8rrbmZONQysX"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}